function UploadFile(){}UploadFile.prototype.run=function(){this.listenQiniuUploadFileEvent()},UploadFile.prototype.listenUploadFileEvent=function(){var n=$("#thunbnail-btn");n.change(function(){var e=n[0].files[0],o=new FormData;o.append("file",e),xfzajax.post({url:"/cms/upload_file/",data:o,processData:!1,contentType:!1,success:function(e){if(200===e.code){var o=e.data.url;$("#thunbnail-form").val(o)}}})})},UploadFile.prototype.listenQiniuUploadFileEvent=function(){var t=this;$("#thunbnail-btn").change(function(){var l=this.files[0];xfzajax.get({url:"/cms/qntoken/",success:function(e){if(200===e.code){var o=e.data.token,n=l.name,a={fname:n,params:{},mimeType:["image/png","image/jpeg","image/gif","image/bmp","image/jpg","video/mp4"]},i={useCdnDomain:!0,region:qiniu.region.z2,retryCount:6};qiniu.upload(l,n,o,a,i).subscribe({next:t.handleFileUploadProgress,error:t.handleFileUploadError,complete:t.handleFileUploadComplete})}}})})},UploadFile.prototype.handleFileUploadProgress=function(e){var o=e.total.percent.toFixed(0)+"%";UploadFile.progressgroup.show();var n=$(".progress-bar");n.css({width:o}),n.text(o)},UploadFile.prototype.handleFileUploadError=function(e){console.log(e.message),$("#process-group").hide()},UploadFile.prototype.handleFileUploadComplete=function(e){$("#process-group").hide();var o="http://pw9qu83i4.bkt.clouddn.com/"+e.key;$("#thunbnail-form").val(o),$(".progress-bar").css({width:0})},$(function(){(new UploadFile).run(),UploadFile.progressgroup=$("#process-group")});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndyaXRlX25ld3MuanMiXSwibmFtZXMiOlsiVXBsb2FkRmlsZSIsInByb3RvdHlwZSIsInJ1biIsInRoaXMiLCJsaXN0ZW5RaW5pdVVwbG9hZEZpbGVFdmVudCIsImxpc3RlblVwbG9hZEZpbGVFdmVudCIsInVwbG9hZEJ0biIsIiQiLCJjaGFuZ2UiLCJmaWxlIiwiZmlsZXMiLCJmb3JtRGF0YSIsIkZvcm1EYXRhIiwiYXBwZW5kIiwieGZ6YWpheCIsInBvc3QiLCJ1cmwiLCJkYXRhIiwicHJvY2Vzc0RhdGEiLCJjb250ZW50VHlwZSIsInN1Y2Nlc3MiLCJyZXN1bHQiLCJ2YWwiLCJzZWxmIiwiZ2V0IiwidG9rZW4iLCJrZXkiLCJuYW1lIiwicHV0RXh0cmEiLCJmbmFtZSIsInBhcmFtcyIsIm1pbWVUeXBlIiwiY29uZmlnIiwidXNlQ2RuRG9tYWluIiwicmVnaW9uIiwicWluaXUiLCJ6MiIsInJldHJ5Q291bnQiLCJ1cGxvYWQiLCJzdWJzY3JpYmUiLCJuZXh0IiwiaGFuZGxlRmlsZVVwbG9hZFByb2dyZXNzIiwiZXJyb3IiLCJoYW5kbGVGaWxlVXBsb2FkRXJyb3IiLCJjb21wbGV0ZSIsImhhbmRsZUZpbGVVcGxvYWRDb21wbGV0ZSIsInJlc3BvbnNlIiwicGVyY2VudFRleHQiLCJ0b3RhbCIsInBlcmNlbnQiLCJ0b0ZpeGVkIiwicHJvZ3Jlc3Nncm91cCIsInNob3ciLCJwcm9ncmVzc2JhciIsImNzcyIsIndpZHRoIiwidGV4dCIsImNvbnNvbGUiLCJsb2ciLCJtZXNzYWdlIiwiaGlkZSJdLCJtYXBwaW5ncyI6IkFBRUEsU0FBU0EsY0FLVEEsV0FBV0MsVUFBVUMsSUFBTSxXQUNaQyxLQUVOQyw4QkFLVEosV0FBV0MsVUFBVUksc0JBQXdCLFdBQ3pDLElBQUlDLEVBQVlDLEVBQUUsa0JBQ2xCRCxFQUFVRSxPQUFPLFdBQ2IsSUFBSUMsRUFBT0gsRUFBVSxHQUFHSSxNQUFNLEdBQzFCQyxFQUFXLElBQUlDLFNBQ25CRCxFQUFTRSxPQUFPLE9BQU9KLEdBQ3ZCSyxRQUFRQyxLQUFLLENBQ1RDLElBQU0sb0JBQ05DLEtBQU9OLEVBQ1BPLGFBQWMsRUFDZEMsYUFBYyxFQUNkQyxRQUFVLFNBQVVDLEdBQ2hCLEdBQW9CLE1BQWpCQSxFQUFhLEtBQVEsQ0FDcEIsSUFBSUwsRUFBTUssRUFBYSxLQUFPLElBQ1RkLEVBQUUsbUJBQ1JlLElBQUlOLFVBUXZDaEIsV0FBV0MsVUFBVUcsMkJBQTZCLFdBQzlDLElBQUltQixFQUFPcEIsS0FDS0ksRUFBRSxrQkFDUkMsT0FBTyxXQUNiLElBQUlDLEVBQU9OLEtBQUtPLE1BQU0sR0FDdEJJLFFBQVFVLElBQUksQ0FDUlIsSUFBTSxnQkFDTkksUUFBVSxTQUFVQyxHQUNoQixHQUF1QixNQUFuQkEsRUFBYSxLQUFXLENBQ3hCLElBQUlJLEVBQVFKLEVBQWEsS0FBUyxNQUU5QkssRUFBTWpCLEVBQUtrQixLQUNYQyxFQUFXLENBQ1hDLE1BQU1ILEVBQ05JLE9BQU8sR0FDUEMsU0FBUyxDQUFDLFlBQWEsYUFBYyxZQUFZLFlBQVksWUFBWSxjQUV6RUMsRUFBUyxDQUNUQyxjQUFjLEVBQ2RDLE9BQVFDLE1BQU1ELE9BQU9FLEdBQ3JCQyxXQUFXLEdBRUVGLE1BQU1HLE9BQU83QixFQUFNaUIsRUFBS0QsRUFBT0csRUFBVUksR0FDL0NPLFVBQVUsQ0FDakJDLEtBQU9qQixFQUFLa0IseUJBQ1pDLE1BQVFuQixFQUFLb0Isc0JBQ2JDLFNBQVdyQixFQUFLc0Isa0NBYXhDN0MsV0FBV0MsVUFBVXdDLHlCQUEyQixTQUFTSyxHQUNyRCxJQUVJQyxFQUZRRCxFQUFTRSxNQUNEQyxRQUNNQyxRQUFRLEdBQUssSUFDbkJsRCxXQUFXbUQsY0FDakJDLE9BQ2QsSUFBSUMsRUFBYzlDLEVBQUUsaUJBQ3BCOEMsRUFBWUMsSUFBSSxDQUFDQyxNQUFRUixJQUN6Qk0sRUFBWUcsS0FBS1QsSUFHckIvQyxXQUFXQyxVQUFVMEMsc0JBQXdCLFNBQVNELEdBQ2xEZSxRQUFRQyxJQUFJaEIsRUFBTWlCLFNBQ0VwRCxFQUFFLGtCQUNScUQsUUFHbEI1RCxXQUFXQyxVQUFVNEMseUJBQTJCLFNBQVNDLEdBQ2pDdkMsRUFBRSxrQkFDUnFELE9BQ2QsSUFFSTVDLEVBRlMsb0NBQ0U4QixFQUFTcEIsSUFFSG5CLEVBQUUsbUJBQ1JlLElBQUlOLEdBQ0RULEVBQUUsaUJBQ1IrQyxJQUFJLENBQUNDLE1BQVEsS0FLN0JoRCxFQUFFLFlBQ21CLElBQUlQLFlBQ1ZFLE1BRVhGLFdBQVdtRCxjQUFnQjVDLEVBQUUiLCJmaWxlIjoid3JpdGVfbmV3cy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuXHJcbmZ1bmN0aW9uIFVwbG9hZEZpbGUoKXtcclxuXHJcbn07XHJcblxyXG5cclxuVXBsb2FkRmlsZS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgLy8gc2VsZi5saXN0ZW5VcGxvYWRGaWxlRXZlbnQoKTtcclxuICAgIHNlbGYubGlzdGVuUWluaXVVcGxvYWRGaWxlRXZlbnQoKTtcclxuXHJcbn07XHJcblxyXG4vLyDkuIrkvKDoh7PmnKzlnLDmnI3liqHlmahcclxuVXBsb2FkRmlsZS5wcm90b3R5cGUubGlzdGVuVXBsb2FkRmlsZUV2ZW50ID0gZnVuY3Rpb24oKXtcclxuICAgIHZhciB1cGxvYWRCdG4gPSAkKCcjdGh1bmJuYWlsLWJ0bicpO1xyXG4gICAgdXBsb2FkQnRuLmNoYW5nZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGZpbGUgPSB1cGxvYWRCdG5bMF0uZmlsZXNbMF07XHJcbiAgICAgICAgdmFyIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XHJcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdmaWxlJyxmaWxlKTtcclxuICAgICAgICB4ZnphamF4LnBvc3Qoe1xyXG4gICAgICAgICAgICAndXJsJzonL2Ntcy91cGxvYWRfZmlsZS8nLFxyXG4gICAgICAgICAgICAnZGF0YSc6Zm9ybURhdGEsXHJcbiAgICAgICAgICAgICdwcm9jZXNzRGF0YSc6ZmFsc2UsXHJcbiAgICAgICAgICAgICdjb250ZW50VHlwZSc6ZmFsc2UsXHJcbiAgICAgICAgICAgICdzdWNjZXNzJzpmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICBpZihyZXN1bHRbJ2NvZGUnXT09PTIwMCl7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9IHJlc3VsdFsnZGF0YSddWyd1cmwnXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGh1bWJuYWlsSW5wdXQgPSAkKCcjdGh1bmJuYWlsLWZvcm0nKTtcclxuICAgICAgICAgICAgICAgICAgICB0aHVtYm5haWxJbnB1dC52YWwodXJsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn07XHJcblxyXG4vLyDkuIrkvKDoh7PkuIPniZvmnI3liqHlmahcclxuVXBsb2FkRmlsZS5wcm90b3R5cGUubGlzdGVuUWluaXVVcGxvYWRGaWxlRXZlbnQgPSBmdW5jdGlvbigpe1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgdmFyIHVwbG9hZEJ0biA9ICQoJyN0aHVuYm5haWwtYnRuJyk7XHJcbiAgICB1cGxvYWRCdG4uY2hhbmdlKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZmlsZSA9IHRoaXMuZmlsZXNbMF07XHJcbiAgICAgICAgeGZ6YWpheC5nZXQoe1xyXG4gICAgICAgICAgICAndXJsJzonL2Ntcy9xbnRva2VuLycsXHJcbiAgICAgICAgICAgICdzdWNjZXNzJzpmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0Wydjb2RlJ10gPT09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0b2tlbiA9IHJlc3VsdFsnZGF0YSddWyd0b2tlbiddO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHZhciBrZXkgPSAobmV3IERhdGUoKSkuZ2V0VGltZSgpICsgJy4nICsgZmlsZS5uYW1lLnNwbGl0KCcuJylbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IGZpbGUubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwdXRFeHRyYSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm5hbWU6a2V5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXM6e30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbWVUeXBlOltcImltYWdlL3BuZ1wiLCBcImltYWdlL2pwZWdcIiwgXCJpbWFnZS9naWZcIixcImltYWdlL2JtcFwiLFwiaW1hZ2UvanBnXCIsXCJ2aWRlby9tcDRcIl0sXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY29uZmlnID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VDZG5Eb21haW46IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lvbjogcWluaXUucmVnaW9uLnoyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXRyeUNvdW50OjYsXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IHFpbml1LnVwbG9hZChmaWxlLCBrZXksIHRva2VuLCBwdXRFeHRyYSwgY29uZmlnKTtcclxuICAgICAgICAgICAgICAgICAgICBvYnNlcnZhYmxlLnN1YnNjcmliZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICduZXh0JzpzZWxmLmhhbmRsZUZpbGVVcGxvYWRQcm9ncmVzcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2Vycm9yJzpzZWxmLmhhbmRsZUZpbGVVcGxvYWRFcnJvcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbXBsZXRlJzpzZWxmLmhhbmRsZUZpbGVVcGxvYWRDb21wbGV0ZSxcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdmFyIHVybCA9IHJlc3VsdFsnZGF0YSddWyd1cmwnXTtcclxuICAgICAgICAgICAgICAgICAgICAvLyB2YXIgdGh1bWJuYWlsSW5wdXQgPSAkKCcjdGh1bmJuYWlsLWZvcm0nKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyB0aHVtYm5haWxJbnB1dC52YWwodXJsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICB9KTtcclxuXHJcbn07XHJcblxyXG5VcGxvYWRGaWxlLnByb3RvdHlwZS5oYW5kbGVGaWxlVXBsb2FkUHJvZ3Jlc3MgPSBmdW5jdGlvbihyZXNwb25zZSl7XHJcbiAgICB2YXIgdG90YWwgPSByZXNwb25zZS50b3RhbDtcclxuICAgIHZhciBwZXJjZW50ID0gdG90YWwucGVyY2VudDtcclxuICAgIHZhciBwZXJjZW50VGV4dCA9IHBlcmNlbnQudG9GaXhlZCgwKSArICclJztcclxuICAgIHZhciBwcm9ncmVzc2dyb3VwID0gVXBsb2FkRmlsZS5wcm9ncmVzc2dyb3VwO1xyXG4gICAgcHJvZ3Jlc3Nncm91cC5zaG93KCk7XHJcbiAgICB2YXIgcHJvZ3Jlc3NiYXIgPSAkKCcucHJvZ3Jlc3MtYmFyJyk7XHJcbiAgICBwcm9ncmVzc2Jhci5jc3Moeyd3aWR0aCc6cGVyY2VudFRleHR9KTtcclxuICAgIHByb2dyZXNzYmFyLnRleHQocGVyY2VudFRleHQpO1xyXG59O1xyXG5cclxuVXBsb2FkRmlsZS5wcm90b3R5cGUuaGFuZGxlRmlsZVVwbG9hZEVycm9yID0gZnVuY3Rpb24oZXJyb3Ipe1xyXG4gICAgY29uc29sZS5sb2coZXJyb3IubWVzc2FnZSk7XHJcbiAgICB2YXIgcHJvZ3Jlc3Nncm91cCA9ICQoJyNwcm9jZXNzLWdyb3VwJyk7XHJcbiAgICBwcm9ncmVzc2dyb3VwLmhpZGUoKTtcclxufTtcclxuXHJcblVwbG9hZEZpbGUucHJvdG90eXBlLmhhbmRsZUZpbGVVcGxvYWRDb21wbGV0ZSA9IGZ1bmN0aW9uKHJlc3BvbnNlKXtcclxuICAgIHZhciBwcm9ncmVzc2dyb3VwID0gJCgnI3Byb2Nlc3MtZ3JvdXAnKTtcclxuICAgIHByb2dyZXNzZ3JvdXAuaGlkZSgpO1xyXG4gICAgdmFyIGRvbWFpbiA9ICdodHRwOi8vcHc5cXU4M2k0LmJrdC5jbG91ZGRuLmNvbS8nO1xyXG4gICAgdmFyIGZpbGVuYW1lID0gcmVzcG9uc2Uua2V5O1xyXG4gICAgdmFyIHVybCA9IGRvbWFpbiArIGZpbGVuYW1lO1xyXG4gICAgdmFyIHRodW1ibmFpbElucHV0ID0gJCgnI3RodW5ibmFpbC1mb3JtJyk7XHJcbiAgICB0aHVtYm5haWxJbnB1dC52YWwodXJsKTtcclxuICAgIHZhciBwcm9ncmVzc2JhciA9ICQoJy5wcm9ncmVzcy1iYXInKTtcclxuICAgIHByb2dyZXNzYmFyLmNzcyh7J3dpZHRoJzowfSk7XHJcblxyXG59O1xyXG5cclxuXHJcbiQoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHVwbG9hZGZpbGUgPSBuZXcgVXBsb2FkRmlsZSgpO1xyXG4gICAgdXBsb2FkZmlsZS5ydW4oKTtcclxuXHJcbiAgICBVcGxvYWRGaWxlLnByb2dyZXNzZ3JvdXAgPSAkKCcjcHJvY2Vzcy1ncm91cCcpO1xyXG59KTsiXX0=
