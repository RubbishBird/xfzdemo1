function getCookie(t){var e=null;if(document.cookie&&""!==document.cookie)for(var o=document.cookie.split(";"),n=0;n<o.length;n++){var a=jQuery.trim(o[n]);if(a.substring(0,t.length+1)===t+"="){e=decodeURIComponent(a.substring(t.length+1));break}}return e}var xfzajax={get:function(t){t.method="get",this.ajax(t)},post:function(t){t.method="post",this._ajaxSetup(),this.ajax(t)},ajax:function(t){$.ajax(t)},_ajaxSetup:function(){$.ajaxSetup({beforeSend:function(t,e){/^(GET|HEAD|OPTIONS|TRACE)$/.test(e.type)||this.crossDomain||t.setRequestHeader("X-CSRFToken",getCookie("csrftoken"))}})}};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInhmemFqYXguanMiXSwibmFtZXMiOlsiZ2V0Q29va2llIiwibmFtZSIsImNvb2tpZVZhbHVlIiwiZG9jdW1lbnQiLCJjb29raWUiLCJjb29raWVzIiwic3BsaXQiLCJpIiwibGVuZ3RoIiwialF1ZXJ5IiwidHJpbSIsInN1YnN0cmluZyIsImRlY29kZVVSSUNvbXBvbmVudCIsInhmemFqYXgiLCJnZXQiLCJhcmdzIiwidGhpcyIsImFqYXgiLCJwb3N0IiwiX2FqYXhTZXR1cCIsIiQiLCJhamF4U2V0dXAiLCJiZWZvcmVTZW5kIiwieGhyIiwic2V0dGluZ3MiLCJ0ZXN0IiwidHlwZSIsImNyb3NzRG9tYWluIiwic2V0UmVxdWVzdEhlYWRlciJdLCJtYXBwaW5ncyI6IkFBSUEsU0FBU0EsVUFBVUMsR0FDZixJQUFJQyxFQUFjLEtBQ2xCLEdBQUlDLFNBQVNDLFFBQThCLEtBQXBCRCxTQUFTQyxPQUU1QixJQURBLElBQUlDLEVBQVVGLFNBQVNDLE9BQU9FLE1BQU0sS0FDM0JDLEVBQUksRUFBR0EsRUFBSUYsRUFBUUcsT0FBUUQsSUFBSyxDQUNyQyxJQUFJSCxFQUFTSyxPQUFPQyxLQUFLTCxFQUFRRSxJQUVqQyxHQUFJSCxFQUFPTyxVQUFVLEVBQUdWLEVBQUtPLE9BQVMsS0FBUVAsRUFBTyxJQUFNLENBQ3ZEQyxFQUFjVSxtQkFBbUJSLEVBQU9PLFVBQVVWLEVBQUtPLE9BQVMsSUFDaEUsT0FJWixPQUFPTixFQUdYLElBQUlXLFFBQVUsQ0FDVkMsSUFBTyxTQUFVQyxHQUNiQSxFQUFhLE9BQUksTUFDakJDLEtBQUtDLEtBQUtGLElBRWRHLEtBQVEsU0FBVUgsR0FDZEEsRUFBYSxPQUFJLE9BQ2pCQyxLQUFLRyxhQUNMSCxLQUFLQyxLQUFLRixJQUVkRSxLQUFRLFNBQVVGLEdBNEJkSyxFQUFFSCxLQUFLRixJQUVYSSxXQUFjLFdBQ1ZDLEVBQUVDLFVBQVUsQ0FDUkMsV0FBWSxTQUFTQyxFQUFLQyxHQUNqQiw2QkFBNkJDLEtBQUtELEVBQVNFLE9BQVVWLEtBQUtXLGFBQzNESixFQUFJSyxpQkFBaUIsY0FBZTVCLFVBQVUiLCJmaWxlIjoieGZ6YWpheC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ3JlYXRlZCBieSBoeW5ldiBvbiAyMDE4LzUvMTUuXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gZ2V0Q29va2llKG5hbWUpIHtcclxuICAgIHZhciBjb29raWVWYWx1ZSA9IG51bGw7XHJcbiAgICBpZiAoZG9jdW1lbnQuY29va2llICYmIGRvY3VtZW50LmNvb2tpZSAhPT0gJycpIHtcclxuICAgICAgICB2YXIgY29va2llcyA9IGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOycpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29va2llcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgY29va2llID0galF1ZXJ5LnRyaW0oY29va2llc1tpXSk7XHJcbiAgICAgICAgICAgIC8vIERvZXMgdGhpcyBjb29raWUgc3RyaW5nIGJlZ2luIHdpdGggdGhlIG5hbWUgd2Ugd2FudD9cclxuICAgICAgICAgICAgaWYgKGNvb2tpZS5zdWJzdHJpbmcoMCwgbmFtZS5sZW5ndGggKyAxKSA9PT0gKG5hbWUgKyAnPScpKSB7XHJcbiAgICAgICAgICAgICAgICBjb29raWVWYWx1ZSA9IGRlY29kZVVSSUNvbXBvbmVudChjb29raWUuc3Vic3RyaW5nKG5hbWUubGVuZ3RoICsgMSkpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY29va2llVmFsdWU7XHJcbn1cclxuXHJcbnZhciB4ZnphamF4ID0ge1xyXG4gICAgJ2dldCc6IGZ1bmN0aW9uIChhcmdzKSB7XHJcbiAgICAgICAgYXJnc1snbWV0aG9kJ10gPSAnZ2V0JztcclxuICAgICAgICB0aGlzLmFqYXgoYXJncyk7XHJcbiAgICB9LFxyXG4gICAgJ3Bvc3QnOiBmdW5jdGlvbiAoYXJncykge1xyXG4gICAgICAgIGFyZ3NbJ21ldGhvZCddID0gJ3Bvc3QnO1xyXG4gICAgICAgIHRoaXMuX2FqYXhTZXR1cCgpO1xyXG4gICAgICAgIHRoaXMuYWpheChhcmdzKTtcclxuICAgIH0sXHJcbiAgICAnYWpheCc6IGZ1bmN0aW9uIChhcmdzKSB7XHJcbiAgICAgICAgLy8gdmFyIHN1Y2Nlc3MgPSBhcmdzWydzdWNjZXNzJ107XHJcbiAgICAgICAgLy8gYXJnc1snc3VjY2VzcyddID0gZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgIC8vICAgICBpZihyZXN1bHRbJ2NvZGUnXSA9PT0gMjAwKXtcclxuICAgICAgICAvLyAgICAgICAgIGlmKHN1Y2Nlc3Mpe1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIHN1Y2Nlc3MocmVzdWx0KTtcclxuICAgICAgICAvLyAgICAgICAgIH1cclxuICAgICAgICAvLyAgICAgfWVsc2V7XHJcbiAgICAgICAgLy8gICAgICAgICB2YXIgbWVzc2FnZU9iamVjdCA9IHJlc3VsdFsnbWVzc2FnZSddO1xyXG4gICAgICAgIC8vICAgICAgICAgaWYodHlwZW9mIG1lc3NhZ2VPYmplY3QgPT0gJ3N0cmluZycgfHwgbWVzc2FnZU9iamVjdC5jb25zdHJ1Y3RvciA9PSBTdHJpbmcpe1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIHdpbmRvdy5tZXNzYWdlQm94LnNob3dFcnJvcihtZXNzYWdlT2JqZWN0KTtcclxuICAgICAgICAvLyAgICAgICAgIH1lbHNle1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIC8vIHtcInBhc3N3b3JkXCI6Wyflr4bnoIHmnIDlpKfplb/luqbkuI3og73otoXov4cyMOS4uu+8gScsJ3h4eCddLFwidGVsZXBob25lXCI6Wyd4eCcsJ3gnXX1cclxuICAgICAgICAvLyAgICAgICAgICAgICBmb3IodmFyIGtleSBpbiBtZXNzYWdlT2JqZWN0KXtcclxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2VzID0gbWVzc2FnZU9iamVjdFtrZXldO1xyXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9IG1lc3NhZ2VzWzBdO1xyXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICB3aW5kb3cubWVzc2FnZUJveC5zaG93RXJyb3IobWVzc2FnZSk7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgfVxyXG4gICAgICAgIC8vICAgICAgICAgfVxyXG4gICAgICAgIC8vICAgICAgICAgaWYoc3VjY2Vzcyl7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgc3VjY2VzcyhyZXN1bHQpO1xyXG4gICAgICAgIC8vICAgICAgICAgfVxyXG4gICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgLy8gfTtcclxuICAgICAgICAvLyBhcmdzWydmYWlsJ10gPSBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAvLyAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgICAgIC8vICAgICB3aW5kb3cubWVzc2FnZUJveC5zaG93RXJyb3IoJ+acjeWKoeWZqOWGhemDqOmUmeivr++8gScpO1xyXG4gICAgICAgIC8vIH07XHJcbiAgICAgICAgJC5hamF4KGFyZ3MpO1xyXG4gICAgfSxcclxuICAgICdfYWpheFNldHVwJzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICQuYWpheFNldHVwKHtcclxuICAgICAgICAgICAgYmVmb3JlU2VuZDogZnVuY3Rpb24oeGhyLCBzZXR0aW5ncykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCEvXihHRVR8SEVBRHxPUFRJT05TfFRSQUNFKSQvLnRlc3Qoc2V0dGluZ3MudHlwZSkgJiYgIXRoaXMuY3Jvc3NEb21haW4pIHtcclxuICAgICAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihcIlgtQ1NSRlRva2VuXCIsIGdldENvb2tpZSgnY3NyZnRva2VuJykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn07XHJcbiJdfQ==
